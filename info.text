Componentes funcionales

-Importar react (opcional)


-Hacer una funcion

//componente App
import React from "react"

const App = () => {
  return <h1>Hola mundo por default</h1>;
}



-La funcion debe retornar algo (es lo que se mostrara. Solo un solo elemento. recordar <> </>). Debe empezar con mayuscula

//exporto App por defaul (ver como lo importo en index)
export default App;




-Se debe exportar la funcion (por defecto o no) -> Ej: import App, { Componente } from './App'; //App por defecto, Componente no

En index.js

import App from './App';




-Cada componente que tenga su propio css

-Instalo dependencia para estilos en react desde https://mui.com/
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material

-------------------------------------------------------------------------------------------

Componentes
-Props (informacion que llega por medio de los parametros)
  const MiFuncion = (parametro) => {

  }

  o

  function MiFuncion (parametros){}

Se puede pasar componentes por props:
  
  return (
    <>
      <Navbar titulo = { tituloPagina } >
        <UnComponente />    //se llaman children  y asi se invocaran desde el componente receptor
        <OtroComponente />
      </Navbar> 
    </>
  );

  invocacion desde el Navbar:

  const Navbar = ( { titulo , children } ) => { ...



-States (variable que ante un cambio genera una actualizacion en un componente)
hook: 
*Siempre comienzan con use. 
*Siempre se declaran dentro de un Componente
*No se pueden declarar en condicionales (if, while, etc..)
*Son funciones
*Para modificar los estados se usa el "setXXX", no se modifican directamente


-Ciclo de vida de componentes y Metodos
Nota: No todos los componente tienen todos estos pasos, pero si la mayoria

*Montaje (Mount)
  -constructor: esta toda la info del objeto, es decir, podria ser lo que hicimos con los estados, antes del return
  -render: dibuja lo que queremos, es decir podria ser todo lo que tenemos en el return
  -componentDidMount: ocurre despues del render. Aca estaria las consultas que necesitamos tener, como por ejemplo, pegarle a una api. Tambien se hacen manipulaciones de estado aqui adentro. Tema de asincronismo
*Actualizacion (Update)
  -constructor
  -render
  -componentDidUpdate
*Desmontaje (Unmount)
  -componentWillUnmount: por ejemplo, asegura el cierre de una conexion. Entre otras cosas.

PROMESA:
  const promesa = new Promise((resolve, reject) => {})   Asi es la plantilla para las promesas



-AJAX (asynchronous js and xml)
  -> funciona de manera asincronica
  -> libreria para usar fetch

  ->GET
    fetch(url)

  ->POST (es necesario configurar el 2do parametro)
    fetch(url,{
      method:"POST",
      headers:"",
      body:"",
    })

ROUTING y NAVEGACION
-> En react SPA (es decir un solo index que cambia por sus componente montandose y desmontandose sin recargar la pagina. Optimo. React lo tiene)
-> Se puede usar una libreria llamada "React Router DOM" 
          npm install react-router-dom
-> Usaremos:
  import { BrowserRouter, Routes, Route } from "react-router-dom";

1° BrowserRouter: debe envolver a todo lo que tiene impacto en la navegacion. 
2° Importar Link y NavLink por donde este la navegacion. Se reemplazan los a por los "Link" y los href se reemplazan por "to".
3° "routes" va a envolver la parte de las vistas. Es decir, lo que va a variar en base a la navegacion


EVENTOS:

Ejemplo de click

import React from "react";

export const ComponenteEventos = () => {

    const callBack = () => {
        console.log("hacer click")
    }

    return (
        <>
            <h1>ComponenteEventos</h1>
            <button onClick={callBack}>Click</button>    
        </>
    )
}

Si se quiere pasa parametros tenemos que hacer funcion flecha... entonces quedaria

export const ComponenteEventos = () => {

    const callBack = (mensaje) => {
        console.log(mensaje)
    }

    return (
        <>
            <h1>ComponenteEventos</h1>
            <button onClick={()=>callBack("Hola va con parametros")}>Click</button>    
        </>
    )
}

Por defecto, al usar un callBack automaticamente por defecto viaja un parametro. El Event (e). Viaja toda la info del evento. Muchas cosas.
Si o si se da en un evento, tipo onClick. Si la llamo la funcion sola no aparece.

Entre los objetos de event tenemos el "target": Este nos que elemnto dispara el evento. Puede ser un boton, o un input. Accedemos con event.target
Todos los eventos tienen un compartamiento default. Se trata del preventDefault que al usarlo cortamos el comportamiento default. Por ejemplo anulamos un a
La propagacion de los click va de padres a hijos. Para frenar la propagacion hay que poner en la funcion que ejecuta el onClick la operacion event.stopPropagation(); Corta el efecto burbuja. 
El efecto burbuja se propaga desde los hijos a los padres. No al reves

Instalar extension React Developer Tools para navegador y ver los eventos

EXTRA: Algo !== unNumero (significa que se queda con todo menos el unNumero)




CONTEXT:

import { createContext } from 'react'     


para crear: export const Context = createContext(); => puede tener o no un valor inicial o no dentro del parentesis

Puedo tener muchos contxtos. 
Permite la comunicacion entre componentes sin que tenes que retroceder a los padres.
si hago con console log a context notaremos entre otra cosas que la info mas importante es el "Consumer" y el "Provider".
El consumer es la informacion concreta, y provider es el que provee la informacion.
Usaremos useContext para obtener la info, y no el consumer.

Ahora.... como lo usamos en los demas componente??? 
simplemente hay que importar el context, y importar de la libreria de react el { useContext }


